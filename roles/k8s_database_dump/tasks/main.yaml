---

# Check initial conditions

- name: Check variables
  ansible.builtin.assert:
    that:
    - kdd_db_kubeconfig | string | length > 0
    - kdd_db_namespace | string | length > 0
    - kdd_db_database | string | length > 0
    - kdd_db_local_port | string | length > 0

# Use kubectl to port-forward to the database pod.
# We also get the process ID so we can use that to kill it when we're done.

- name: Run kubectl port-forward
  ansible.builtin.include_role:
    name: k8s_kubectl
    tasks_from: port-forward.yaml
  vars:
    ktl_kubeconfig: "{{ kdd_db_kubeconfig }}"
    ktl_namespace: "{{ kdd_db_namespace }}"
    ktl_pod: "{{ kdd_db_pod }}"
    ktl_local_port: "{{ kdd_db_local_port }}"
    ktl_pod_port: "{{ kdd_db_pod_port }}"
    ktl_port_forward_time_seconds: "{{ kdd_db_port_forward_time_minutes | int * 60 }}"

# Does the chosen database exist?

- name: Collect databases
  community.postgresql.postgresql_info:
    filter:
    - databases
    login_host: "127.0.0.1"
  register: postgresql_info
  when: not ansible_check_mode

- name: Set database discovered (check mode)
  ansible.builtin.set_fact:
    database_discovered: yes
  when: ansible_check_mode

- name: Set database discovered (check mode)
  ansible.builtin.set_fact:
    database_discovered: "{{ kdd_db_database in postgresql_info.databases }}"
  when: not ansible_check_mode

- name: Set dump file
  ansible.builtin.set_fact:
    dump_file: "{{ kdd_db_dump_directory }}/\
      {{ kdd_db_file_basename_prefix_pattern | strftime }}\
      {{ kdd_db_file_basename }}.sql{{ kdd_db_file_compression }}"

- name: Set success (assume failure)
  ansible.builtin.set_fact:
    success: no

- name: Known database
  when: database_discovered
  block:

  # Get and display key information about the database

  - name: Collect database info
    community.postgresql.postgresql_info:
      db: "{{ kdd_db_database }}"
      login_host: "127.0.0.1"
    register: postgresql_info

  - name: Display database version
    ansible.builtin.debug:
      var: postgresql_info.version.full

  - name: Display database owner
    ansible.builtin.debug:
      var: postgresql_info.databases.{{ kdd_db_database }}.owner

  - name: Display database size
    ansible.builtin.debug:
      var: postgresql_info.databases.{{ kdd_db_database }}.size

  # Dump the known chosen database

  - name: Dumping database to {{ dump_file }}
    community.postgresql.postgresql_db:
      name: "{{ kdd_db_database }}"
      state: dump
      target: "{{ dump_file }}"
      login_host: "127.0.0.1"
      dump_extra_args: "{{ kdd_db_dump_extra_args }}"

  - name: Set success
    ansible.builtin.set_fact:
      success: yes

- name: Unknown database
  when: not database_discovered
  block:

  # Database does not exist - tell the user

  - name: Unknown database
    ansible.builtin.debug:
      msg: "Unknown database '{{ kdd_db_database }}'"

# Always kill the async command

- name: Kill kubectl command
  ansible.builtin.include_role:
    name: k8s_kubectl
    tasks_from: kill.yaml
  vars:
    ktl_pid: "{{ k8s_kubectl_pid }}"

# Copy the dump file to S3?

- name: Copy to S3
  ansible.builtin.include_tasks: to-s3.yaml
  vars:
    s3_bucket: "{{ kdd_db_s3_bucket }}"
    s3_bucket_directory: "{{ kdd_db_s3_bucket_directory }}"
    s3_src: "{{ dump_file }}"
  when: kdd_db_s3_bucket | string | length > 0

# Report success or failure

- name: Assert success
  ansible.builtin.assert:
    that: success
    fail_msg: "Dump of the '{{ kdd_db_database }}' database failed"

- name: Stat the written file
  ansible.builtin.stat:
    path: "{{ dump_file }}"
  register: dump_file_stat

- name: Display summary
  ansible.builtin.debug:
    msg:
    - The '{{ kdd_db_database }}' database has been dumped to '{{ dump_file }}'
    - Size {{ ansible_check_mode | ternary(0, dump_file_stat.stat.size) }} bytes
