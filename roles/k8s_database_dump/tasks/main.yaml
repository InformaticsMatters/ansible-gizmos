---

# Check initial conditions

- name: Check variables
  assert:
    that:
    - kdd_db_kubeconfig | string | length > 0
    - kdd_db_namespace | string | length > 0
    - kdd_db_database | string | length > 0
    - kdd_db_local_port | string | length > 0

# Use kubectl to port-forward to the database pod.
# We also get the process ID so we can use that to kill it when we're done.

- name: Run kubectl port-forward
  include_role:
    name: k8s_kubectl
    tasks_from: port-forward.yaml
  vars:
    kc_kubeconfig: "{{ kdd_db_kubeconfig }}"
    kc_namespace: "{{ kdd_db_namespace }}"
    kc_pod: "{{ kdd_db_pod }}"
    kc_local_port: "{{ kdd_db_local_port }}"
    kc_pod_port: "{{ kdd_db_pod_port }}"
    kc_port_forward_time_seconds: "{{ kdd_db_port_forward_time_minutes | int * 60 }}"

# Does the chosen database exist?

- name: Collect databases
  community.postgresql.postgresql_info:
    filter:
    - databases
    login_host: "127.0.0.1"
  register: postgresql_info

- name: Set dump file
  set_fact:
    dump_file: "{{ kdd_db_dump_directory }}/{{ kdd_db_file_basename }}.sql{{ kdd_db_file_compression }}"

- name: Set success (assume failure)
  set_fact:
    success: no

- name: Known database
  block:

  # Dump the known chosen database

  - name: Dumping database ({{ kdd_db_database }}) -> {{ dump_file }}
    community.postgresql.postgresql_db:
      name: "{{ kdd_db_database }}"
      state: dump
      target: "{{ dump_file }}"
      login_host: "127.0.0.1"
      dump_extra_args: "{{ kdd_db_dump_extra_args }}"

  - name: Set success
    set_fact:
      success: yes

  when: kdd_db_database in postgresql_info.databases

- name: Unknown database
  block:

  # Database does not exist - tell the user

  - name: Unknown database
    debug:
      msg: "Unknown database '{{ kdd_db_database }}'"

  when: kdd_db_database not in postgresql_info.databases

# Always kill the async command

- name: Kill kubectl command
  include_role:
    name: k8s_kubectl
    tasks_from: kill.yaml
  vars:
    kc_pid: "{{ k8s_kubectl_pid }}"

# Report success or failure

- name: Assert success
  assert:
    that: success
    fail_msg: "Dump of the '{{ kdd_db_database }}' database failed"

- name: Stat the written file
  stat:
    path: "{{ dump_file }}"
  register: dump_file_stat

- name: Display summary
  debug:
    msg:
    - The '{{ kdd_db_database }}' database has been dumped to '{{ dump_file }}'
    - Size {{ dump_file_stat.stat.size }} bytes
