---

# Check initial conditions

- name: Check variables
  ansible.builtin.assert:
    that:
    - kdr_db_kubeconfig | string | length > 0
    - kdr_db_namespace | string | length > 0
    - kdr_db_database | string | length > 0
    - kdr_db_local_port | string | length > 0

- name: Check user password
  ansible.builtin.assert:
    that:
    - kdr_db_user_password | length > 0
    fail_msg: "kdr_db_user_password is not set. Set it or KDR_DB_USER_PASSWORD"
  when: kdr_db_user | length > 0

# Check the restore file (download form S3 if required)

- name: Set restore file
  ansible.builtin.set_fact:
    restore_file: "{{ kdr_db_restore_directory }}/{{ kdr_db_file_basename }}.sql{{ kdr_db_file_compression }}"

- name: Get from S3
  ansible.builtin.include_tasks: from-s3.yaml
  vars:
    s3_bucket: "{{ kdr_db_s3_bucket }}"
    s3_bucket_directory: "{{ kdr_db_s3_bucket_directory }}"
    s3_dest: "{{ restore_file }}"
  when: kdr_db_s3_bucket | string | length > 0

- name: Stat the restore file
  ansible.builtin.stat:
    path: "{{ restore_file }}"
  register: restore_file_stat

- name: Assert the restore file exists
  ansible.builtin.assert:
    that:
    - restore_file_stat.stat.exists
    fail_msg: "The restore file '{{ restore_file }}' does not exist"
  when: not ansible_check_mode

- name: Display restore destination
  ansible.builtin.debug:
    msg:
    - Restoring database '{{ kdr_db_database }}' from '{{ restore_file }}'
    - Size {{ ansible_check_mode | ternary(0, restore_file_stat.stat.size) }} bytes
    - Using kubeconfig '{{ kdr_db_kubeconfig }}'
    - To Namespace '{{ kdr_db_namespace }}'
    - And Pod '{{ kdr_db_pod }}'

- name: Display restore user
  ansible.builtin.debug:
    msg:
    - With user '{{ kdr_db_user }}' ownership and password '{{ kdr_db_user_password }}'
  when: kdr_db_user | length > 0

- name: A cautionary reminder before we restore
  ansible.builtin.pause:
    prompt: >
      Are you sure you want to restore from this file?
      Type 'YES' to continue
  register: pause_result
  when: not ansible_check_mode

- name: Assert confirmation
  ansible.builtin.assert:
    that: pause_result.user_input == 'YES'
    fail_msg: "Stopping - you did not type YES"
  when: not ansible_check_mode

# Use kubectl to port-forward to the database pod.
# We also get the process ID so we can use that to kill it when we're done.

- name: Run kubectl port-forward
  ansible.builtin.include_role:
    name: k8s_kubectl
    tasks_from: port-forward.yaml
  vars:
    ktl_kubeconfig: "{{ kdr_db_kubeconfig }}"
    ktl_namespace: "{{ kdr_db_namespace }}"
    ktl_pod: "{{ kdr_db_pod }}"
    ktl_local_port: "{{ kdr_db_local_port }}"
    ktl_pod_port: "{{ kdr_db_pod_port }}"
    ktl_port_forward_time_seconds: "{{ kdr_db_port_forward_time_minutes | int * 60 }}"

- name: Check pg_restore
  ansible.builtin.include_tasks: check-pg-restore.yaml

- name: Restore database
  ansible.builtin.include_tasks: restore-database.yaml
  when:
  - kdr_restore_version_ok is defined
  - kdr_restore_version_ok

# Always kill the async command

- name: Kill kubectl command
  ansible.builtin.include_role:
    name: k8s_kubectl
    tasks_from: kill.yaml
  vars:
    ktl_pid: "{{ k8s_kubectl_pid }}"
  when: not ansible_check_mode

# Report success or failure

- name: Assert success
  ansible.builtin.assert:
    that: kdr_db_error_message is not defined
    fail_msg: An error message exists '{{ kdr_db_error_message }}'
  when: kdr_db_error_message is defined

- name: Display summary
  ansible.builtin.debug:
    msg:
    - The '{{ kdr_db_database }}' database has been restored
    - Using kubeconfig '{{ kdr_db_kubeconfig }}'
    - Restored to namespace '{{ kdr_db_namespace }}'
    - And Pod '{{ kdr_db_pod }}'
